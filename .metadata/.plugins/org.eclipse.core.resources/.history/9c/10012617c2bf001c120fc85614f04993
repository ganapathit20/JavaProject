package io.boodskap.iot.api.impl;

import javax.ws.rs.core.Response;

import io.boodskap.iot.api.ApiResponseMessage;
import io.boodskap.iot.api.DgroupApiService;
import io.boodskap.iot.api.NotFoundException;
import io.boodskap.iot.api.model.CIDeviceGroup;
import io.boodskap.iot.api.model.CustomQuery;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaMSF4JServerCodegen", date = "2022-04-19T14:23:17.719244+05:30[Asia/Kolkata]")
public class DgroupApiServiceImpl extends DgroupApiService {
	
	@Override
	public Response countAllDeviceGroups() throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response countDeviceGroups(String domainKey, String ownerDeviceId) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response countDomainDeviceGroups(String domainKey) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response deleteAllDeviceGroups() throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response deleteDeviceGroup(String domainKey, String ownerDeviceId, String groupId) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response deleteDeviceGroups(String domainKey, String ownerDeviceId) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response deleteDeviceGroupsByQuery(String domainKey, String body) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response deleteDomainDeviceGroups(String domainKey) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response getDeviceGroup(String domainKey, String ownerDeviceId, String groupId) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response listDeviceGroups(String domainKey, String ownerDeviceId, Integer page, Integer pageSize, Boolean next, String groupId) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response searchDeviceGroup(String domainKey, Integer page, Integer pageSize, String body) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response selectDeviceGroupsByQuery(String domainKey, CustomQuery customQuery) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response updateDeviceGroupByQuery(String domainKey, CustomQuery customQuery) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}

	@Override
	public Response upsertDeviceGroup(CIDeviceGroup ciDeviceGroup) throws NotFoundException {
		// do some magic!
		return Response.ok().entity(new ApiResponseMessage(ApiResponseMessage.OK, "magic!")).build();
	}
}
